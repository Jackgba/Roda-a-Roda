#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <string.h>
#include <windows.h>

typedef struct
{
	char pista[17], sorteio[17];
	int qtd;
	char vetpalavras[3][17];
	char descpalavras[3][17];
} Jogo;

void ler_premios(float[]);
float sorteia_premios(float[]);
int prepara(Jogo*);
void placar (Jogo,float[]);
int verificaLetra (Jogo*, char);
Jogo ler_jogo(void);

int main(){

	//setlocale(LC_ALL, "Portuguese");

	float placarjogador[3]= {0,0,0}, rodar, premios[12];
	int i=0, j, totalLetras, acerto, totalAcertos=0, regressiva;
	//int sorteio,sorteiopalavras //acho que não sao mais utilizadas
	char letraescolhida, palavrafinal[17];
	Jogo jogo;
	
	jogo = ler_jogo();
	printf("\nAPAGAR ESTA LINHA DEPOIS---Pista:%s\tQtd:%d\tPalavras: %s %s %s\n\n", jogo.pista, jogo.qtd, jogo.vetpalavras[0], jogo.vetpalavras[1], jogo.vetpalavras[2]);
	totalLetras = prepara(&jogo);
	ler_premios(premios);
	
	do {
		placar(jogo,placarjogador);	
		printf("\nJogador %d: Rode a roda!", i+1);
	  	fflush(stdin);
		getchar();
		rodar = sorteia_premios(premios);

		if (rodar == 0){
			printf("Passa a vez!\n");
			i = (i+1)%3; //vai para próximo jogador
      		printf("A vez sera passada para o jogador %d.\nPressione qualquer tecla.", i+1);
      		fflush(stdin); //limpa o teclado (precisa para poder funcionar a prox linha)
      		getchar(); //espera o usuario clicar em qualquer tecla
      		system("cls"); //limpa a tela
		}
	
		else if(rodar == 0.01f){
			printf("Perdeu tudo!\nPressione qualquer tecla.");
			placarjogador[i] = 0; //zerar placar do jogador ativo
			i = (i+1)%3; //vai para próximo jogador
			fflush(stdin);
			getchar();
      			system("cls");
		}
		else { 
			do{ //perguntar letra até o usuário digitar um caracter válido
				printf("Uma letra por R$%.2f: ", rodar);
				fflush(stdin);
				scanf("%c", &letraescolhida);
				
			} while ( letraescolhida < 'A' || ( letraescolhida > 'Z' && letraescolhida < 'a' ) || letraescolhida > 'z' ); 
			
			if ( letraescolhida >= 'a' && letraescolhida <= 'z')
				letraescolhida -= 32;
			
			acerto = verificaLetra (&jogo, letraescolhida); 
      
			if (acerto>0) {
				placarjogador[i] = placarjogador[i] + rodar*acerto;
				totalAcertos += acerto; //armazena total de caracteres descobertos
			}
			else if (acerto == -1){
        		i = (i+1)%3;//vai para próximo jogador
        		printf("A letra %c ja foi descoberta.\nA vez sera passada para o jogador %d.\n\nPressione qualquer tecla.", letraescolhida, i+1);
        		fflush(stdin);
        		getchar();
      			system("cls");
     		}
			else{
        		i = (i+1)%3;//vai para próximo jogador
        		printf("Nao existe letra %c na palavra.\nA vez sera passada para o jogador %d.\n\nPressione qualquer tecla.", letraescolhida, i+1);
        		fflush(stdin);
        		getchar();
      			system("cls");
			}
		}
	} while ( totalLetras > totalAcertos + 3 );
	// -------------------------
	//Pelo visto, para a contagem regressiva funcionar junto como scanf ou gets, é necessário usar multithread. É complexo, preciso de mais tempo.
	//fiz uma pergunta no stackoverflow: https://pt.stackoverflow.com/questions/390165/tem-como-fazer-um-timeout-junto-com-scanf-ou-gets-em-c
	do{

	printf("Jogador %d: Faltam %d letras para completar a palavra.\n", i+1, totalLetras-totalAcertos);
	printf("Voce tem 5 segundos para pensar e depois digitar a palavra.\n");
	printf("Valendo R$ %.2f, a palavra é: ", rodar+placarjogador[i]);
	gets(palavrafinal);
		for(regressiva=5;regressiva!=0; regressiva--){
		printf("%d\n", regressiva);
		Sleep(1000);
	}  i = (i+1)%3;
 
} while (totalLetras != totalAcertos);
	
	// --------------------------
		
	
return 0;
}

void ler_premios(float premios[]){
	int i=0;
	FILE *arq;
	
	arq = fopen("PREMIOS.dat", "r"); // define arq como o arquivo premio.dat para somente ler
	if(arq == NULL) {
		printf("Erro, nao foi possivel abrir o arquivo\n");
		exit(2);
		}
	while ( i<12 ){
		fscanf(arq, "%f\n", &premios[i]);
		i++;
	}
	
	fclose(arq);
}

float sorteia_premios(float premios[]){ //separei o sorteio da leitura pq se não toda vez que fosse sortear ia fazer todo o trampo de abrir arquivo e ler
	float valor;
	srand(time(NULL));
	valor =  premios[rand()%12];
 	return valor;
}


int prepara(Jogo*jogo){ 
	int i, j, contagem=0, qtddLetras, qtddPalavras;
	qtddPalavras = (*jogo).qtd;
	for (i=0;i<qtddPalavras;i++) { //percorre todas as palavras
		qtddLetras = strlen((*jogo).vetpalavras[i]);
		for (j=0;j<qtddLetras;j++){ //percorre todas as letras até o tamanho de cada palavra
			(*jogo).descpalavras[i][j]='_';
			contagem++; //conta quantos caracteres existem no total das palavras
		}
	}
	return contagem;
}

void placar (Jogo jogo, float jog[] ){
	int i, j;
	printf("\n\t\t\tA dica eh: %s\n\n\t\t\t", jogo.pista);
	for (i=0; i<jogo.qtd; i++) printf("%s\t", jogo.descpalavras[i]);
	printf("\n\nJogador 1\tJogador 2\tJogador3\n");
	printf("===========\t===========\t===========\n");
	printf("R$%.2f\t\tR$%.2f\t\tR$%.2f\n",jog[0],jog[1],jog[2]);
}

int verificaLetra (Jogo *jogo, char letra){
	int i, j, acert=0;
	for (i=0; i<(*jogo).qtd ; i++){ //percorre todas as palavras
		for (j=0;j<strlen((*jogo).vetpalavras[i]);j++){ //percorre todas as letras até atingir o tamanho da palavra
    		if ((*jogo).descpalavras[i][j] == letra) return -1; //se a letra já foi descoberta, retorna -1
			else if ((*jogo).vetpalavras[i][j] == letra ) { //compara letra por letra da palavra original para ver se é igual
				(*jogo).descpalavras[i][j] = letra; //revela a letra na palavra descoberta
				acert++; //contagem para saber quantas letras foram descobertas
			} 
		}
	}
  return acert;
}

Jogo ler_jogo(void){	
	int qtd, i,j, sorteio;
	char pista[17], vetpalavras[3][17];
	Jogo jogo[5];
	FILE *arq;
	arq = fopen("PALAVRAS.dat", "r");
	if (arq == NULL)
	{
		printf("\nErro, nao foi possivel abrir o arquivo\n");
 		exit(1);
	}
	for (j=0;j<5;j++)
	{
		if (fscanf(arq,"%16s %d", pista, &qtd) != 2) //primeiro faz a leitura do nome e da quantidade de palavras
		{ //se nao conseguiu ler os 2 campos
			if (feof(arq)) //é fim do arquivo ?
				printf("* ok, fim de arquivo\n");
			else
				printf("\nErro no conteudo do arquivo\n");
			exit(0);
    	}
		for (i = 0; i < qtd; i++)
		{
			if (fscanf(arq, "%16s", vetpalavras[i]) != 1)
			{
				printf("\nErro no conteudo do arquivo\n");
 				exit(2);
      		}
    	}
		strcpy(jogo[j].pista, pista);
		jogo[j].qtd = qtd;
		for (i = 0; i < qtd; i++)
			strcpy(jogo[j].vetpalavras[i], vetpalavras[i]);
	}
  	srand(time(NULL));
	sorteio = rand()%5;
	fclose(arq);
	return jogo[sorteio];
}


